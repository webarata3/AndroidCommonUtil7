apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

repositories {
    maven {
        url 'https://raw.githubusercontent.com/webarata3/maven/master/repository'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.3.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
}

apply plugin: 'maven'

def repo = new File(rootDir, "build/repository")

uploadArchives {
    repositories {
        mavenDeployer {
            repository url: "file://${repo.absolutePath}"
            pom.version = '1.0.0'
            pom.groupId = 'link.webarata3.dro.common'
            pom.artifactId = 'dro-util7'
        }
    }
}

// http://vividcode.hatenablog.com/entry/howto/publish-aar-package-to-maven-central-with-gradle
android.libraryVariants.all { variant ->
    if (variant.name == 'release') {
        def javadocTaskName = "javadoc${variant.name.capitalize()}";
        task(javadocTaskName, type: Javadoc) {
            description "Generates Javadoc for ${variant.name}."
            source = variant.javaCompile.source
            destinationDir = reporting.file("${variant.name}-docs")
            ext.androidJar = "${System.properties['ANDROID_HOME']}/platforms/${android.compileSdkVersion}/android.jar"
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
            options.encoding = 'UTF-8'
            options.charSet 'UTF-8'
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
            exclude '**/R$*.java'
        }
        task("javadocsJar${variant.name.capitalize()}", type: Jar, dependsOn: "javadoc${variant.name.capitalize()}") {
            classifier = "javadoc"
            from tasks[javadocTaskName].destinationDir
        }
        task("sourcesJar${variant.name.capitalize()}", type: Jar) {
            classifier = "sources"
            from variant.javaCompile.source
        }

        /* artifacts management.
         * See: http://www.gradle.org/docs/current/userguide/artifact_management.html */
        artifacts {
            archives tasks["javadocsJar${variant.name.capitalize()}"]
            archives tasks["sourcesJar${variant.name.capitalize()}"]
        }
    }
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.9"
}

task jacocoTestReport(type: JacocoReport) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

// FindBugs
// FindBugs plugin
// task check
// レポート build/reports/findbugs/main.xml
apply plugin: 'findbugs'

findbugs {
    ignoreFailures = true
}

apply plugin: 'com.github.kt3k.coveralls'

coveralls {
    jacocoReportPath = ""${buildDir}/build/reports/jacoco/jacocoTestReport/jacoco.xml""
   // jacocoReportPath = '${buildDir}/build/reports/coverage/debug/report.xml'
}
