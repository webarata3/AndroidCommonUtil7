apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

repositories {
    maven {
        url 'https://raw.githubusercontent.com/webarata3/maven/master/repository'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.0.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
}

apply plugin: 'maven'

def repo = new File(rootDir, "build/repository")

uploadArchives {
    repositories {
        mavenDeployer {
            repository url: "file://${repo.absolutePath}"
            pom.version = '1.0.0'
            pom.groupId = 'link.webarata3.dro.common'
            pom.artifactId = 'dro-util7'
        }
    }
}

// SDKの場所を取得する
def getSdkDir() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def sdkDir = properties.getProperty('sdk.dir', null)

    return sdkDir
}

// http://vividcode.hatenablog.com/entry/howto/publish-aar-package-to-maven-central-with-gradle
android.libraryVariants.all { variant ->
    if (variant.name == 'release') {
        def javadocTaskName = "javadoc${variant.name.capitalize()}";
        task(javadocTaskName, type: Javadoc) {
            description "Generates Javadoc for ${variant.name}."
            source = variant.javaCompile.source
            destinationDir = reporting.file("${variant.name}-docs")
            ext.androidJar = "${getSdkDir()}/platforms/${android.compileSdkVersion}/android.jar"
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
            options.encoding = 'UTF-8'
            options.charSet 'UTF-8'
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
            exclude '**/R$*.java'
        }
        task("javadocsJar${variant.name.capitalize()}", type: Jar, dependsOn: "javadoc${variant.name.capitalize()}") {
            classifier = "javadoc"
            from tasks[javadocTaskName].destinationDir
        }
        task("sourcesJar${variant.name.capitalize()}", type: Jar) {
            classifier = "sources"
            from variant.javaCompile.source
        }

        /* artifacts management.
         * See: http://www.gradle.org/docs/current/userguide/artifact_management.html */
        artifacts {
            archives tasks["javadocsJar${variant.name.capitalize()}"]
            archives tasks["sourcesJar${variant.name.capitalize()}"]
        }
    }
}

apply plugin: 'findbugs'

task findbugs(type: FindBugs) {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low" // ＊どのレベルの報告まで対応するかで変更＊
    classes = files("build/intermediates/classes/")
    source 'src/main'
    include '**/*.java'
    reports {
        xml.enabled = true
    }
}

//task findbugsConvertUtf8 << {
//    def filename="${project.rootDir}/build/reports/findbugs/main.html"
//    def file = new File(filename)
//    def text = file.getText()
//    text = text.replaceAll(/<head>/, "<head>\n<meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>")
//
//    def fw=new File(filename).newWriter()
//    fw.writeLine(text)
//    fw.close()
//}

apply plugin: 'jacoco'

task jacoco(type: JacocoReport) {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/jacoco/html"
    }
    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.class'
            ])
    sourceDirectories = files('src/main/java')
    executionData = files('build/jacoco/testDebugUnitTest.exec')
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.7.0'
    }
}

apply plugin: 'com.github.kt3k.coveralls'

coveralls {
    jacocoReportPath = 'build/reports/jacoco/jacoco/jacoco.xml'
    sourceDirs = files('src/main/java').absolutePath
}
